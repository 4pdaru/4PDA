package four.pda.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import four.pda.dao.SearchArticle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_ARTICLE".
*/
public class SearchArticleDao extends AbstractDao<SearchArticle, Long> {

    public static final String TABLENAME = "SEARCH_ARTICLE";

    /**
     * Properties of entity SearchArticle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Position = new Property(5, Double.class, "position", false, "POSITION");
        public final static Property AuthorId = new Property(6, Long.class, "authorId", false, "AUTHOR_ID");
        public final static Property AuthorName = new Property(7, String.class, "authorName", false, "AUTHOR_NAME");
        public final static Property LabelName = new Property(8, String.class, "labelName", false, "LABEL_NAME");
        public final static Property LabelColor = new Property(9, String.class, "labelColor", false, "LABEL_COLOR");
    };


    public SearchArticleDao(DaoConfig config) {
        super(config);
    }
    
    public SearchArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER," + // 1: date
                "\"TITLE\" TEXT," + // 2: title
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"IMAGE\" TEXT," + // 4: image
                "\"POSITION\" REAL," + // 5: position
                "\"AUTHOR_ID\" INTEGER," + // 6: authorId
                "\"AUTHOR_NAME\" TEXT," + // 7: authorName
                "\"LABEL_NAME\" TEXT," + // 8: labelName
                "\"LABEL_COLOR\" TEXT);"); // 9: labelColor
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_ARTICLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SearchArticle entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        Double position = entity.getPosition();
        if (position != null) {
            stmt.bindDouble(6, position);
        }
 
        Long authorId = entity.getAuthorId();
        if (authorId != null) {
            stmt.bindLong(7, authorId);
        }
 
        String authorName = entity.getAuthorName();
        if (authorName != null) {
            stmt.bindString(8, authorName);
        }
 
        String labelName = entity.getLabelName();
        if (labelName != null) {
            stmt.bindString(9, labelName);
        }
 
        String labelColor = entity.getLabelColor();
        if (labelColor != null) {
            stmt.bindString(10, labelColor);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SearchArticle readEntity(Cursor cursor, int offset) {
        SearchArticle entity = new SearchArticle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // position
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // authorId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // authorName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // labelName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // labelColor
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SearchArticle entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setAuthorId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAuthorName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLabelName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLabelColor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SearchArticle entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SearchArticle entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
